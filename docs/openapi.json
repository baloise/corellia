{
  "openapi" : "3.0.1",
  "info" : {
    "title" : "Contracts API",
    "description" : "An API which allows to communicate with SaaS Providers, which produces Contracts for the host of this API",
    "contact" : {
      "email" : "TBD.TBD@baloise.com"
    },
    "license" : {
      "name" : "TBD",
      "url" : "TBD"
    },
    "version" : "1.0.0"
  },
  "paths" : {
    "/contracts/v1" : {
      "post" : {
        "tags" : [ "contracts" ],
        "summary" : "upload a contract at Baloise",
        "description" : "uploaded a contract to Baloise. If validation fails processing is refused, a corresponding error is thrown",
        "operationId" : "uploadContract",
        "requestBody" : {
          "description" : "a second call with the same requestId leads to a no-op on our side, if we processed the contractdata already. We return the same ContractReference",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RequestId"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "default" : {
            "description" : "a handle to the contract for conversation with Baloise is provided",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ContractReference"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid Contract is provided. See Error details for more information about validation issues",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503" : {
            "description" : "technical issue on our side, please retry later",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/contracts/v1/documents" : {
      "post" : {
        "tags" : [ "documents" ],
        "summary" : "upload a Document for a contract at Baloise.",
        "description" : "Please note that this operation needs to be called per document for a contract to be uploaded. The response contains a handle to the document. This handle should be provided with the contract to be uploaded via uploadContract",
        "operationId" : "uploadDocument",
        "requestBody" : {
          "description" : "a documnent that is part of a contract",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Document"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "default" : {
            "description" : "a handle to the document for providing with a new contract to be uploaded via POST contracts",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/FileHandle"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid Document is provided. See Error details for more information about validation issues",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503" : {
            "description" : "technical issue on our side, please retry later",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    }
  },
  "components" : {
    "schemas" : {
      "Agent" : {
        "required" : [ "agentNumber", "email" ],
        "type" : "object",
        "properties" : {
          "agentNumber" : {
            "maxLength" : 8,
            "minLength" : 0,
            "type" : "string",
            "description" : "Identification of an Agent"
          },
          "email" : {
            "maxLength" : 70,
            "minLength" : 0,
            "type" : "string"
          }
        }
      },
      "Company" : {
        "required" : [ "address", "contactFirstName", "contactLastName", "contactSalutation", "name" ],
        "type" : "object",
        "properties" : {
          "name" : {
            "maxLength" : 70,
            "minLength" : 3,
            "type" : "string"
          },
          "uidNumber" : {
            "maxLength" : 15,
            "minLength" : 0,
            "type" : "string"
          },
          "contactSalutation" : {
            "maxLength" : 20,
            "minLength" : 0,
            "type" : "string",
            "enum" : [ "Mr", "Mrs" ]
          },
          "contactLastName" : {
            "maxLength" : 35,
            "minLength" : 2,
            "type" : "string"
          },
          "contactFirstName" : {
            "maxLength" : 35,
            "minLength" : 2,
            "type" : "string"
          },
          "address" : {
            "$ref" : "#/components/schemas/Address"
          }
        }
      },
      "RequestId" : {
        "required" : [ "id" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "maxLength" : 40,
            "minLength" : 0,
            "type" : "string"
          }
        }
      },
      "Address" : {
        "required" : [ "city", "houseNumber", "street", "zipCode" ],
        "type" : "object",
        "properties" : {
          "street" : {
            "maxLength" : 35,
            "minLength" : 0,
            "type" : "string"
          },
          "houseNumber" : {
            "maxLength" : 10,
            "minLength" : 0,
            "type" : "string"
          },
          "zipCode" : {
            "maxLength" : 4,
            "minLength" : 0,
            "type" : "string"
          },
          "city" : {
            "maxLength" : 30,
            "minLength" : 0,
            "type" : "string"
          }
        }
      },
      "MonetaryAmount" : {
        "required" : [ "amount" ],
        "type" : "object",
        "properties" : {
          "amount" : {
            "type" : "number"
          }
        }
      },
      "FileHandle" : {
        "type" : "object",
        "properties" : {
          "handle" : {
            "type" : "string"
          }
        }
      },
      "Coverable" : {
        "required" : [ "code", "coverage" ],
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "integer",
            "format" : "int32"
          },
          "coverage" : {
            "maxItems" : 99,
            "minItems" : 1,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Coverage"
            }
          }
        }
      },
      "Product" : {
        "required" : [ "code", "coverables" ],
        "type" : "object",
        "properties" : {
          "code" : {
            "maximum" : 20,
            "minimum" : 0,
            "type" : "integer",
            "format" : "int32"
          },
          "pricingYear" : {
            "type" : "string",
            "format" : "date"
          },
          "coverables" : {
            "maxItems" : 99,
            "minItems" : 0,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Coverable"
            }
          }
        }
      },
      "Coverage" : {
        "required" : [ "code", "premium", "sumInsured" ],
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "integer",
            "format" : "int32"
          },
          "premium" : {
            "$ref" : "#/components/schemas/MonetaryAmount"
          },
          "deductible" : {
            "$ref" : "#/components/schemas/MonetaryAmount"
          },
          "sumInsured" : {
            "$ref" : "#/components/schemas/MonetaryAmount"
          }
        }
      },
      "Document" : {
        "required" : [ "contractId", "data", "documentType" ],
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "format" : "byte"
            }
          },
          "contractId" : {
            "maxLength" : 20,
            "minLength" : 0,
            "type" : "string"
          },
          "documentType" : {
            "maxLength" : 20,
            "minLength" : 0,
            "type" : "string",
            "enum" : [ "contract", "receipt" ]
          }
        }
      },
      "ErrorResponse" : {
        "type" : "object",
        "properties" : {
          "errorCause" : {
            "type" : "string",
            "enum" : [ "badRequest", "inputValidation" ]
          },
          "message" : {
            "type" : "string"
          },
          "detailMessages" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "ContractReference" : {
        "type" : "object",
        "properties" : {
          "reference" : {
            "maxLength" : 30,
            "minLength" : 1,
            "type" : "string"
          }
        }
      },
      "Role" : {
        "required" : [ "role" ],
        "type" : "object",
        "properties" : {
          "role" : {
            "type" : "string",
            "enum" : [ "Insuranceholder", "Payer" ]
          },
          "person" : {
            "$ref" : "#/components/schemas/Person"
          },
          "company" : {
            "$ref" : "#/components/schemas/Company"
          }
        }
      },
      "Payment" : {
        "required" : [ "code" ],
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "integer",
            "format" : "int32"
          },
          "discountCode" : {
            "maxLength" : 20,
            "minLength" : 0,
            "type" : "string"
          },
          "company" : {
            "$ref" : "#/components/schemas/Company"
          },
          "person" : {
            "$ref" : "#/components/schemas/Person"
          }
        }
      },
      "PhoneNumber" : {
        "required" : [ "countryCode", "phoneNumber" ],
        "type" : "object",
        "properties" : {
          "countryCode" : {
            "type" : "string"
          },
          "phoneNumber" : {
            "type" : "string"
          }
        }
      },
      "Contract" : {
        "required" : [ "agent", "conditionType", "conditionYear", "contractId", "creationDate", "endDate", "fileHandles", "payment", "product", "roles", "startDate", "totalNetPrice" ],
        "type" : "object",
        "properties" : {
          "creationDate" : {
            "type" : "string",
            "format" : "date"
          },
          "startDate" : {
            "type" : "string",
            "format" : "date"
          },
          "endDate" : {
            "type" : "string",
            "format" : "date"
          },
          "contractId" : {
            "maxLength" : 20,
            "minLength" : 0,
            "type" : "string"
          },
          "totalNetPrice" : {
            "$ref" : "#/components/schemas/MonetaryAmount"
          },
          "roles" : {
            "maxItems" : 99,
            "minItems" : 1,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Role"
            }
          },
          "product" : {
            "$ref" : "#/components/schemas/Product"
          },
          "agent" : {
            "$ref" : "#/components/schemas/Agent"
          },
          "payment" : {
            "$ref" : "#/components/schemas/Payment"
          },
          "fileHandles" : {
            "maxItems" : 99,
            "minItems" : 1,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/FileHandle"
            }
          },
          "conditionType" : {
            "maxLength" : 99,
            "minLength" : 1,
            "type" : "string"
          },
          "conditionYear" : {
            "maxLength" : 4,
            "minLength" : 4,
            "type" : "string"
          }
        }
      },
      "Person" : {
        "required" : [ "address", "firstName", "lastName", "salutation" ],
        "type" : "object",
        "properties" : {
          "salutation" : {
            "maxLength" : 20,
            "minLength" : 0,
            "type" : "string",
            "enum" : [ "Mr", "Mrs" ]
          },
          "lastName" : {
            "maxLength" : 35,
            "minLength" : 2,
            "type" : "string"
          },
          "firstName" : {
            "maxLength" : 35,
            "minLength" : 2,
            "type" : "string"
          },
          "dateOfBirth" : {
            "type" : "string",
            "format" : "date"
          },
          "phoneNumber" : {
            "$ref" : "#/components/schemas/PhoneNumber"
          },
          "emailAddress" : {
            "maxLength" : 70,
            "minLength" : 0,
            "type" : "string"
          },
          "language" : {
            "maxLength" : 2,
            "minLength" : 2,
            "type" : "string"
          },
          "address" : {
            "$ref" : "#/components/schemas/Address"
          }
        }
      }
    }
  }
}